// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id  String @id @default(uuid())
  name  String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  environments ProjectEnvironment[]
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
  RESULT
  ERROR
}

model Message {
  id  String @id @default(uuid())
  content String
  role MessageRole
  type MessageType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  fragment Fragment?
}

model Fragment {
  id  String @id @default(uuid())
  messageId String @unique
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  sandboxUrl String
  productionUrl String? // Permanent deployment URL (e.g., stripe-easy-boost.bitro.app)
  deploymentId String? // Vercel deployment ID
  title String
  files Json

  // Backend Infrastructure
  databaseSchema String? // PostgreSQL schema name (e.g., proj_abc123)
  supabaseProjectId String? // Optional: for tracking Supabase resources
  environmentVars Json? // Encrypted environment variables

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectEnvironment {
  id String @id @default(uuid())
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  key String
  value String // Will be encrypted
  
  isSecret Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([projectId, key])
}

model Usage {
  key String  @id
  points Int
  expire DateTime?
}
